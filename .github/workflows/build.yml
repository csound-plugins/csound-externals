name: Build And Publish
on: push
env:
  PACKAGENAME: csound-externals
jobs:
  buildjob:
    name: Build plugins on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        # os: [ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          - os: macos-latest
            triplet: x64-osx
        # os: [windows-2019]

    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      - uses: lukka/get-cmake@latest

      - name: Restore vcpkg and its artifacts.
        if: runner.os == 'windows'
        uses: actions/cache@v2
        with:
          # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
          # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
            !${{ env.VCPKG_ROOT }}/installed
          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git
          # commit id changes, or the list of packages changes. In this case a cache miss must happen and a new
          # entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used
          # vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly,
          # in order the recreate the right content the key must be changed as well, and it must be brand new
          # (i.e. not existing already).
          key: |
            ${{ hashFiles( 'vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      - name: windows build
        if: runner.os == 'windows'
        run: |
          # git submodule update --init --recursive
          # git submodule status --recursive
          # echo "Finished submodules"

          Copy-Item "csound/Android/CsoundAndroid/jni/version.h" -Destination "csound/include"
          Copy-Item "csound/Android/CsoundAndroid/jni/float-version.h" -Destination "csound/include"

          # cmake --preset ninja-multi-vcpkg

          # vcpkg install
          ls ${{ env.VCPKG_ROOT }}

          ${{ env.VCPKG_ROOT }}/vcpkg install eigen3

          Remove-Item -Recurse -Force build-windows -ErrorAction Ignore
          mkdir build-windows
          cd build-windows
          cmake -A x64 -DBUILD_STK_OPCODES=OFF -DBUILD_JACK_OPCODES=OFF -DBUILD_FAUST_OPCODES=OFF -DBUILD_P5GLOVE_OPCODES=OFF -DBUILD_FLUID_OPCODES=OFF -DBUILD_PYTHON_OPCODES=OFF  \DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows ..

          echo "----------- Building -----------"

          cmake --build . --config Release
          # cmake --build --preset ninja-multi-vcpkg-release

          Tree /F

          #Remove-Item -Recurse -Force build-windows -ErrorAction Ignore
          #mkdir build-windows
          #cd build-windows

          #cmake --build . --config Release
          #ls Release

          #rm -ErrorAction Ignore Release/FLAC.dll, Release/ogg.dll, Release/opus.dll, Release/sndfile.dll, Release/vorbis*

          #set-variable -name ARCHIVE -value "csound-plugins--win64.zip"
          #rm $ARCHIVE -ErrorAction Ignore
          #7z a $ARCHIVE ./Release/*.dll
          #7z a $ARCHIVE ../assets/README.txt
          #7z l $ARCHIVE
          #if(!(Test-Path ../artifacts)) {
          #  New-Item -ItemType directory -Path ../artifacts
          #}
          #cp $ARCHIVE ../artifacts
          #ls ../artifacts

      - name: macos build
        if: runner.os == 'macOS'
        run: |

          brew update
          
          # brew installs here
          # sudo apt-get install libsndfile1-dev libfluidsynth-dev libeigen3-dev fluid libhdf5-dev 
          brew install libsndfile fluid-synth eigen fltk hdf5

          git submodule update --init --recursive --remote
          # git submodule foreach git pull origin master
          git submodule status --recursive

          cd csound/include
          ln -s ../Android/CsoundAndroid/jni/version.h .
          ln -s ../Android/CsoundAndroid/jni/float-version.h .
          cd ../..
          
          rm -fr build-macos
          mkdir build-macos
          cd build-macos

          cmake -DSKIP_FAST_MATH=True ..
          make -j4
          
          ARCHIVE=$PACKAGENAME--macos.zip
          pluginfiles=$(ls -1 */*.dylib)

          for f in */*.dylib; do
              otool -L "$f"
          done
          
          echo "--- Found plugin files: "
          echo "$pluginfiles"

          echo "Creating archive $ARCHIVE"

          7z a $ARCHIVE ./*/*.dylib
          # 7z a $ARCHIVE ../assets/README.txt
          7z l $ARCHIVE
          
          mkdir -p ../artifacts
          cp $ARCHIVE ../artifacts
          ls ../artifacts


      - name: linux build
        if: runner.os == 'linux'
        run: |
          sudo apt-get install libsndfile1-dev libfluidsynth-dev libeigen3-dev fluid libhdf5-dev 
          
          git submodule update --init --recursive --remote
          git submodule foreach git pull origin master --rebase
          git submodule status --recursive

          cd csound/include
          ln -s ../Android/CsoundAndroid/jni/version.h .
          ln -s ../Android/CsoundAndroid/jni/float-version.h .

          cd ../..

          echo "--- Root dir ---"
          ls

          rm -fr build-linux
          mkdir build-linux
          cd build-linux

          cmake ..
          make -j4
          
          sofiles=$(ls -1 */*.so)
   
          echo "--- Found .so files: "
          echo "$sofiles"

          for f in */*.so; do
            echo "ldd $f:"
            ldd "$f"
          done

          ARCHIVE=$PACKAGENAME--linux.zip
          echo "Creating archive $ARCHIVE"

          7z a $ARCHIVE ./*/*.so
          # 7z a $ARCHIVE ../assets/README.txt
          7z l $ARCHIVE
          
          mkdir -p ../artifacts
          cp $ARCHIVE ../artifacts
          ls ../artifacts


      # Windows: Restore from cache the previously built ports. 
      # If cache-miss, download and build vcpkg (aka "bootstrap vcpkg").
      #- name: Restore from cache and install vcpkg
      #  if: runner.os == 'windows'
      #  # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
      #  uses: lukka/run-vcpkg@v6
      #  with:
      #    vcpkgArguments: libsndfile:x64-windows  # fluidsynth:x64-windows
      #    vcpkgTriplet: x64-windows
      #    vcpkgGitCommitId: "0bf3923f9fab4001c00f0f429682a0853b5749e0"
      #    # setupOnly: true
          


      - uses: actions/upload-artifact@v2
        with:
          name: plugins
          path: artifacts/*.zip

  publish:           
    name: Publish artifacts as a Pre-Release
    # if: contains(github.ref, 'tags/v')
    needs: [buildjob]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v2
        with:
          name: plugins
          path: plugins

      - name: List files
        run: |
          ls -R
      
      - name: Publish
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          title: "Development Build"
          prerelease: True
          files: |
            plugins/*.zip
            
