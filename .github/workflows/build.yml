name: Build And Publish
on: push
env:
  PACKAGENAME: csound-externals
jobs:
  buildjob:
    name: Build plugins on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [windows-latest, ubuntu-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          - os: macos-latest
            triplet: x64-osx
        # os: [windows-2019]

    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: update submodules
        run: |
          echo "Calling git submodule update"
          git submodule update --init --recursive
          git submodule status --recursive

          echo "Finished submodules"

      - name: update csound headers
        run: |
          cd csound/include
          ln -s ../Android/CsoundAndroid/jni/version.h .
          ln -s ../Android/CsoundAndroid/jni/float-version.h .
          cd ../..


      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      - uses: lukka/get-cmake@latest

      - name: Restore vcpkg and its artifacts.
        if: runner.os == 'windows'
        uses: actions/cache@v2
        with:
          # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
          # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
            !${{ env.VCPKG_ROOT }}/installed
          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git
          # commit id changes, or the list of packages changes. In this case a cache miss must happen and a new
          # entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used
          # vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly,
          # in order the recreate the right content the key must be changed as well, and it must be brand new
          # (i.e. not existing already).
          key: |
            ${{ hashFiles( 'vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      - name: macos build
        if: runner.os == 'macOS'
        run: |

          brew update
          
          # brew installs here
          # sudo apt-get install libsndfile1-dev libfluidsynth-dev libeigen3-dev fluid libhdf5-dev 
          brew install libsndfile fluid-synth eigen fltk hdf5

          # cd csound/include
          # ln -s ../Android/CsoundAndroid/jni/version.h .
          # ln -s ../Android/CsoundAndroid/jni/float-version.h .
          # cd ../..
          
          rm -fr build-macos
          mkdir build-macos
          cd build-macos

          cmake -DUSE_DOUBLE=True -DSKIP_FAST_MATH=True ..
          make -j4
          
          ARCHIVE=$PACKAGENAME--macos.zip
          pluginfiles=$(ls -1 */*.dylib)

          for f in */*.dylib; do
              otool -L "$f"
          done
          
          echo "--- Found plugin files: "
          echo "$pluginfiles"

          echo "Creating archive $ARCHIVE"

          7z a $ARCHIVE ./*/*.dylib
          # 7z a $ARCHIVE ../assets/README.txt
          7z l $ARCHIVE
          
          mkdir -p ../artifacts
          cp $ARCHIVE ../artifacts
          ls ../artifacts


      - name: linux build
        if: runner.os == 'linux'
        run: |
          sudo apt update
          sudo apt-get install libsndfile1-dev libfluidsynth-dev libeigen3-dev libhdf5-dev # fluid
          
          echo "--- Root dir ---"
          ls

          rm -fr build-linux
          mkdir build-linux
          cd build-linux

          cmake -DUSE_DOUBLE=True ..
          make -j `nproc`
          
          sofiles=$(ls -1 */*.so)
   
          echo "--- Found .so files: "
          echo "$sofiles"

          for f in */*.so; do
            echo "ldd $f:"
            ldd "$f"
          done

          ARCHIVE=$PACKAGENAME--linux.zip
          echo "Creating archive $ARCHIVE"

          7z a $ARCHIVE ./*/*.so
          # 7z a $ARCHIVE ../assets/README.txt
          7z l $ARCHIVE
          
          mkdir -p ../artifacts
          cp $ARCHIVE ../artifacts
          ls ../artifacts
          

      - uses: actions/upload-artifact@v2
        with:
          name: plugins
          path: artifacts/*.zip

  publish:           
    name: Publish artifacts as a Pre-Release
    # if: contains(github.ref, 'tags/v')
    needs: [buildjob]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v2
        with:
          name: plugins
          path: plugins

      - name: List files
        run: |
          ls -R
      
      - name: Publish
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          title: "Development Build"
          prerelease: True
          files: |
            plugins/*.zip
            
